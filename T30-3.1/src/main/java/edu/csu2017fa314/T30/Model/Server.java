package edu.csu2017fa314.T30.Model;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import spark.Request;
import spark.Response;
import static spark.Spark.post;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;
import edu.csu2017fa314.T30.Model.Model;
import edu.csu2017fa314.T30.View.View;

public class Server {


    public static void main(String[] args) {
        Server s = new Server();
        s.serve();
    }

    public void serve() {
        Gson g = new Gson();
        post("/testing", this::testing, g::toJson); // Create new listener

    }

    public void Getlocations()
    {


    }
    public Object testing(Request rec, Response res) {

        Model model = new Model();
        View view = new View();

        // Set the return headers
        setHeaders(res);

        // Init json parser
        JsonParser parser = new JsonParser();

        // Grab the json body from POST
        JsonElement elm = parser.parse(rec.body());


        // Create new Gson (a Google library for creating a JSON representation of a java class)
        Gson gson = new Gson();

        // Create new Object from received JsonElement elm
        ServerRequest sRec = gson.fromJson(elm, ServerRequest.class);



        // The object generated by the frontend should match whatever class you are reading into.
        // Notice how DataClass has name and ID and how the frontend is generating an object with name and ID.
        // print query from clint request
        System.out.println("Got \"" + sRec.toString() + "\" from server.");



        // Client sends query under "name" field in received json:
        // get the name from the object
        String searched = sRec.getQuery();
        String query = "%" + searched + "%";


        // Get something from the server
        // find the names inside the database
        QueryBuilder q = new QueryBuilder("myou", "830652516"); // Create new QueryBuilder instance and pass in credentials //TODO update credentials
        String queryString = String.format("SELECT * FROM airports WHERE municipality LIKE '%s' OR name LIKE '%s' OR type LIKE '%s'", query, query, query);

        // put names inside an arraylist
        ArrayList<Location>  queryResults = q.query(queryString);

        model.readData(queryResults);

        String[][] itinerary = model.shortestItinerary();
        ArrayList<TreeMap<String, String>> jsonData = model.getJsonData();
        ArrayList<String> myKeys = model.getMyKeys();
        queryResults = view.buildJSON(itinerary, myKeys, queryResults);
        view.buildMap(itinerary);
        // Create object with svg file path and array of matching database entries to return to server
        ServerResponse sRes = new ServerResponse("./itin.svg", queryResults); //TODO update file path to your svg, change to "./testing.png" for a sample image

        System.out.println("Sending \"" + sRes.toString() + "\" to server.");

        //Convert response to json
        Object ret = gson.toJson(sRes, ServerResponse.class);






        /* What to return to the server.
         * In this example, the "ServerResponse" object sRes is converted into a JSON representation using the GSON library.
         * If you'd like to see what this JSON looks like, it is logged to the console in the web client.
         */
        return ret;
    }

    public void setHeaders(Response res) {
        // Declares returning type json
        res.header("Content-Type", "application/json");

        // Ok for browser to call even if different host host
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "*");
    }
}